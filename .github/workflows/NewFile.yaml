name: Build and Push

#BackToMySlack
#trigger
on:
   push:
     branches:
        - 'release/v[0-9]+.[0-9]+'

jobs:
    #name of your job
    fs-scan:
        #runner
        runs-on: ubuntu-latest    
        outputs:
          vulns: ${{ steps.set-vulns-output.outputs.vulns }}

        if: "!startsWith(github.event.head_commit.message, '#NORUN')"
        #steps in this job
        steps:
          - name: checkout source code
            uses: actions/checkout@v4

          #Trivy fs -s file(.)
          - name: Run Trivy vulnerability scanner in fs mode
            uses: aquasecurity/trivy-action@master
            with:
                scan-type: 'fs'
                scan-ref: '.'
                format: 'json' 
                output: './trivy-report.json'
                severity: 'HIGH' #CRITICAL

          - name: Set VULNS output
            id: set-vulns-output
            run: |
                vulns_value=$(cat ./trivy-report.json | jq '.Results[] | has("Vulnerabilities")')
                echo "vulns=${vulns_value}" >> "$GITHUB_OUTPUT"

          #upload report if vulns is found
          - name: Upload trivy report as a Github artifact
            uses: actions/upload-artifact@v4
            with:
                name: gen-trivy-report
                path: './trivy-report.json'

       
    bulid-and-push:
          #runner
          needs: fs-scan
          if: ${{ needs.fs-scan.outputs.vulns != 'true' }}
          runs-on: ubuntu-latest    
          steps:
              - name: checkout source code
                uses: actions/checkout@v4

              #install Cosign
              - name: Install Cosign
                uses: sigstore/cosign-installer@v3.5.0
            
              - name: Log into registry
                uses: docker/login-action@v3
                with:
                  username: ${{ secrets.dockerhub_username }}
                  password: ${{ secrets.dockerhub_token }}            

              - name: build and push docker image
                id: build-and-push
                uses: docker/build-push-action@v5
                with:
                  context: .
                  push : true
                  tags: ${{ github.repository }}:${{github.sha}}
                  secrets: |
                    GIT_AUTH_TOKEN=${{ secrets.MY_API }}

              #consign generate-key-pairs
              #consign sign --key cosign.key <acct_name>/myapp:<git-commit>
              - name: Generate Cosign Key Pairs
                id: generate_keys
                run: |
                  cosign generate-key-pair

              - name: Get Docker image digest
                id: get-digest
                run: |
                    DIGEST=$(docker manifest inspect ${{ github.repository }}:${{ github.sha }} | jq -r '.config.digest')
                    echo "digest=$DIGEST" >>$GITHUB_OUTPUT

              - name: Sign Docker Image
                run: |
                    cosign sign --key cosign.key ${{ github.repository }}@${{ steps.get-digest.outputs.digest }}
                env:
                    COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}



    Slack-Success:
          #runner
          runs-on: ubuntu-latest    
          needs: 
              bulid-and-push
          steps:
              #Slack Notifcaiton
              - name: Slack_Summary
                id: Slack_Summary
                run: |
                   slack_color="good"
                   slack_message="* Name:* Toh Lay Siong
                   * Metriculation:* A0291916W
                   * Email:* E1336249@u.nus.edu
                   * Git:* ${{ github.server_url }}/${{ github.repository }}
                   * Image:* <https://hub.docker.com/repository/docker/${{ github.repository }}>"
                    slack_title="Image build and signed"


                    echo "slack-color=$slack_color" >> $GITHUB_OUTPUT
                    echo 'slack-message<<EOF' >> $GITHUB_OUTPUT
                    echo "$slack_message" >> $GITHUB_OUTPUT
                    echo 'EOF' >> $GITHUB_OUTPUT
                    echo "slack-title=$slack_title" >> $GITHUB_OUTPUT

              - name: Slack Notification
                uses: rtCamp/action-slack-notify@v2
                env:
                    SLACK_WEBHOOK: ${{ secrets.P_SLACK_API }}
                    SLACK_COLOR: ${{ steps.Slack_Summary.outputs.slack-color }}
                    SLACK_MESSAGE: ${{ steps.Slack_Summary.outputs.slack-message }}
                    SLACK_TITLE:  ${{ steps.Slack_Summary.outputs.slack-title }}


    Slack-Fail:
          #runner
          runs-on: ubuntu-latest    
          needs: fs-scan
          if: ${{ needs.fs-scan.outputs.vulns == 'true' }}
          steps:
              #Slack Notifcaiton
              - name: Slack_Summary
                id: Slack_Summary
                run: |
                    slack_color="#E01E5A"    
                    slack_message="Failed trivy scan, see uploaded report"
                    slack_title="Scan failed - Toh Lay Siong"


                    echo "slack-color=$slack_color" >> $GITHUB_OUTPUT
                    echo 'slack-message<<EOF' >> $GITHUB_OUTPUT
                    echo "$slack_message" >> $GITHUB_OUTPUT
                    echo 'EOF' >> $GITHUB_OUTPUT
                    echo "slack-title=$slack_title" >> $GITHUB_OUTPUT

              - name: Slack Notification
                uses: rtCamp/action-slack-notify@v2
                env:
                    SLACK_WEBHOOK: ${{ secrets.P_SLACK_API }}
                    SLACK_COLOR: ${{ steps.Slack_Summary.outputs.slack-color }}
                    SLACK_MESSAGE: ${{ steps.Slack_Summary.outputs.slack-message }}
                    SLACK_TITLE:  ${{ steps.Slack_Summary.outputs.slack-title }}

    Upload-report:
          #runner
          needs: Slack-Fail
          runs-on: ubuntu-latest    
          steps:
            
              - name: Download artifact
                uses: actions/download-artifact@v4
                with:
                    name: gen-trivy-report

              - name: Convert Trivy report to table and txt
                uses: aquasecurity/trivy-action@0.12.0
                with:
                    scan-type: 'convert'
                    vuln-type: ""
                    image-ref: './trivy-report.json'
                    format: 'table'
                    severity: "HIGH,CRITICAL"
                    output: './trivy-report.txt'

              - name: Upload Trivy report to Slack
                uses: MeilCli/slack-upload-file@v4
                with:
                    slack_token: ${{secrets.P_SLACK_BOT_TOKEN}}
                    channel_id: ${{secrets.P_SLACK_CHANNEL_ID}}
                    file_path: './trivy-report.txt'
                    initial_comment: 'Scan report by Toh Lay Siong'





  
